{
    "benchmarks": {
        "algorithms.ccdc.CCDCesqueLine.time_ccdcesque1": {
            "code": "def time_ccdcesque1(self, setup):\n    \"\"\" Bench with 'defaults' defined in setup with most tests turned off\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    model = CCDCesque(**kwargs)\n    for col in range(setup['Y'].shape[-1]):\n        _Y, _X, _dates = setup['Y'][..., col], setup['X'], setup['dates']\n        mask = np.in1d(_Y[-1, :], [0, 1])\n        model.fit(_X[mask, :], _Y[:, mask], _dates[mask])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesqueLine.time_ccdcesque1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:108", 
            "timeout": 360, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesqueLine.time_ccdcesque2": {
            "code": "def time_ccdcesque2(self, setup):\n    \"\"\" Bench with remove_noise turned on\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    kwargs.update({'remove_noise': True})\n    model = CCDCesque(**kwargs)\n    for col in range(setup['Y'].shape[-1]):\n        _Y, _X, _dates = setup['Y'][..., col], setup['X'], setup['dates']\n        mask = np.in1d(_Y[-1, :], [0, 1])\n        model.fit(_X[mask, :], _Y[:, mask], _dates[mask])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesqueLine.time_ccdcesque2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:108", 
            "timeout": 360, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesqueLine.time_ccdcesque3": {
            "code": "def time_ccdcesque3(self, setup):\n    \"\"\" Bench with remove_noise, dynamic_rmse turned on\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    kwargs.update({'remove_noise': True,\n                   'dynamic_rmse': True})\n    model = CCDCesque(**kwargs)\n    for col in range(setup['Y'].shape[-1]):\n        _Y, _X, _dates = setup['Y'][..., col], setup['X'], setup['dates']\n        mask = np.in1d(_Y[-1, :], [0, 1])\n        model.fit(_X[mask, :], _Y[:, mask], _dates[mask])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesqueLine.time_ccdcesque3", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:108", 
            "timeout": 360, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesqueLine.time_ccdcesque4": {
            "code": "def time_ccdcesque4(self, setup):\n    \"\"\" Bench with remove_noise, dynamic_rmse, slope_test turned on\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    kwargs.update({'remove_noise': True,\n                   'dynamic_rmse': True,\n                   'slope_test': True})\n    model = CCDCesque(**kwargs)\n    for col in range(setup['Y'].shape[-1]):\n        _Y, _X, _dates = setup['Y'][..., col], setup['X'], setup['dates']\n        mask = np.in1d(_Y[-1, :], [0, 1])\n        model.fit(_X[mask, :], _Y[:, mask], _dates[mask])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesqueLine.time_ccdcesque4", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:108", 
            "timeout": 360, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque1": {
            "code": "def time_ccdcesque1(self, setup):\n    \"\"\" Bench with 'defaults' defined in setup with most tests turned off\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    for i in range(n):\n        model = CCDCesque(**kwargs)\n        model.fit(setup['X'], setup['Y'], setup['dates'])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque1", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:35", 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque2": {
            "code": "def time_ccdcesque2(self, setup):\n    \"\"\" Bench with remove_noise turned on\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    kwargs.update({'remove_noise': True})\n    for i in range(n):\n        model = CCDCesque(**kwargs)\n        model.fit(setup['X'], setup['Y'], setup['dates'])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque2", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:35", 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque3": {
            "code": "def time_ccdcesque3(self, setup):\n    \"\"\" Bench with remove_noise, dynamic_rmse turned on\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    kwargs.update({'remove_noise': True,\n                   'dynamic_rmse': True})\n    for i in range(n):\n        model = CCDCesque(**kwargs)\n        model.fit(setup['X'], setup['Y'], setup['dates'])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque3", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:35", 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }, 
        "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque4": {
            "code": "def time_ccdcesque4(self, setup):\n    \"\"\" Bench with remove_noise, dynamic_rmse, slope_test turned on\n    \"\"\"\n    kwargs = version_kwargs(setup['kwargs'])\n    kwargs.update({'remove_noise': True,\n                   'dynamic_rmse': True,\n                   'slope_test': True})\n    for i in range(n):\n        model = CCDCesque(**kwargs)\n        model.fit(setup['X'], setup['Y'], setup['dates'])\n", 
            "goal_time": 2.0, 
            "name": "algorithms.ccdc.CCDCesquePixel263.time_ccdcesque4", 
            "number": 0, 
            "param_names": [], 
            "params": [], 
            "repeat": 0, 
            "setup_cache_key": "/home/ceholden/Documents/yatsm/bench/benchmarks/algorithms/ccdc.py:35", 
            "timeout": 60.0, 
            "type": "time", 
            "unit": "seconds"
        }
    }, 
    "date_to_hash": {
        "1446426455000": "fc1be255", 
        "1446502176000": "ee8d7543", 
        "1446734809000": "1fc48481", 
        "1447174039000": "e4cc5ca7", 
        "1447180833000": "0b4a3743", 
        "1447181049000": "e944dc96", 
        "1447181262000": "3733d5b3", 
        "1447258218000": "226b06a2", 
        "1447276105000": "83952fa5", 
        "1447428561000": "41b12d47", 
        "1447872617000": "b56b8a18", 
        "1447873506000": "cb2f2c5a", 
        "1447875596000": "39c6c93d", 
        "1447875667000": "01a6adec", 
        "1447875943000": "a52a066f", 
        "1447877634000": "966edd8b", 
        "1447877661000": "d390c5f2", 
        "1447878244000": "20386873", 
        "1448024907000": "065394fb", 
        "1448413724000": "9d49d737", 
        "1448414236000": "9ab2ead1", 
        "1448414627000": "9613b064", 
        "1448415709000": "7dee4aad", 
        "1448506869000": "b1cf47ff", 
        "1448507104000": "b2e92c23", 
        "1448507213000": "22cf509e", 
        "1449135799000": "a32ef840", 
        "1449135847000": "c89b41a4", 
        "1449136668000": "2fba333b", 
        "1449140053000": "4ac359fd", 
        "1449141178000": "4b2cce62", 
        "1449216156000": "906d4ec4", 
        "1449216392000": "0d3e60fd", 
        "1449292195000": "8fbf5960", 
        "1449434465000": "29ddd4c0", 
        "1449438458000": "30040764", 
        "1449439382000": "df582d23", 
        "1449445775000": "7b929123", 
        "1449447245000": "0e4e9f30", 
        "1449465433000": "ec161c4e", 
        "1449472348000": "9b5a77c2", 
        "1449472945000": "31e21f90", 
        "1449474610000": "6bf00ff3", 
        "1449474673000": "5f8a667d", 
        "1449474705000": "bfea85d6", 
        "1449474944000": "024b16b0", 
        "1449495623000": "b663ef22", 
        "1449495736000": "772badc9", 
        "1449498524000": "42beb397", 
        "1449531859000": "d9b4b80c", 
        "1449531968000": "ec0d06ec", 
        "1449531985000": "bb868922", 
        "1449534232000": "f315eca3", 
        "1449596470000": "0c2425cf", 
        "1449596688000": "9f4e3773", 
        "1449601080000": "53397e0e", 
        "1449602065000": "dd4b2022", 
        "1449628690000": "2c2c7645", 
        "1449631852000": "54e468da", 
        "1449632903000": "61372747", 
        "1449635074000": "1b8f0049", 
        "1449636282000": "139f00ef", 
        "1449639867000": "898619d6", 
        "1449694154000": "8b6db33d"
    }, 
    "extra_pages": [
        [
            "regressions", 
            "Show regressions", 
            "Display information about recent regressions"
        ]
    ], 
    "machines": {
        "etm": {
            "arch": "x86_64", 
            "cpu": "Intel(R) Core(TM) i5 CPU         760  @ 2.80GHz", 
            "machine": "etm", 
            "os": "Linux 4.2.5-1-ARCH", 
            "ram": "12267468", 
            "version": 1
        }
    }, 
    "params": {
        "Cython": [
            "0.20"
        ], 
        "arch": [
            "x86_64"
        ], 
        "branch": [
            "master"
        ], 
        "click": [
            "4.0"
        ], 
        "cpu": [
            "Intel(R) Core(TM) i5 CPU         760  @ 2.80GHz"
        ], 
        "gdal": [
            "1.11"
        ], 
        "machine": [
            "etm"
        ], 
        "matplotlib": [
            "1.4.3"
        ], 
        "numba": [
            "0.22"
        ], 
        "numpy": [
            "1.9"
        ], 
        "os": [
            "Linux 4.2.5-1-ARCH"
        ], 
        "pandas": [
            "0.16.0"
        ], 
        "patsy": [
            "0.3.0"
        ], 
        "python": [
            "2.7"
        ], 
        "pyyaml": [
            "3.11"
        ], 
        "ram": [
            "12267468"
        ], 
        "scikit-learn": [
            "0.15"
        ], 
        "scipy": [
            "0.14.0"
        ], 
        "statsmodels": [
            "0.5.0"
        ]
    }, 
    "project": "yatsm", 
    "project_url": "https://github.com/ceholden/yatsm", 
    "show_commit_url": "http://github.com/ceholden/yatsm/commit/", 
    "tags": {
        "v0.1.0": 1416541756000, 
        "v0.2.0": 1424206471000, 
        "v0.3.0": 1426286720000, 
        "v0.3.1": 1426795746000, 
        "v0.4.0": 1429824976000, 
        "v0.4.1": 1438195151000, 
        "v0.5.0": 1442262781000, 
        "v0.5.1": 1444138006000, 
        "v0.5.2": 1444417344000, 
        "v0.5.3": 1445360047000, 
        "v0.5.4": 1446068509000, 
        "v0.5.5": 1448415709000
    }
}