# Example configuration file for YATSM line runner
#
# This configuration includes details about the dataset and to run an analysis
# pipeline using YATSM

# Version of config
version: "0.7.0"

data:
    # primary (str): Preference among datasets for projection/geotransform
    #                corresponds to a key in data.datasets
    primary: Landsat
    # Optional: Directory location for caching dataset
    # cache_dir: "$ROOT/cache"
    datasets:
        Landsat:
            # Type of reader for this dataset (GDAL)
            reader:
                name: GDAL
                config:
                    # Text file containing dates and images
                    input_file: "$ROOT/images.csv"
                    # Input date column name
                    date_column: datetime
                    # Input date format
                    date_format: "%Y-%m-%dT%H:%M:%S.%f"
                    # Band names
                    band_names: [blue, green, red, nir, swir1, swir2, temp, fmask]
                    # "dtype" argument to pandas.read_csv
                    # Allows you to specify the datatype of specific columns
                    column_dtype:
                        path: str
                    # Keep references to input files open throughout process
                    #   Can cut down on overhead of repeatedly opening files
                    #   assuming the OS lets users keep many open (see
                    #   `ulimit -n`)
                    keep_open: False 
            # Mask band (e.g., Fmask)
            mask_band: fmask
            # List of integer values to mask within the mask band
            mask_values: [2, 3, 4, 255]
            # Valid range of band data
            min_values: [0, 0, 0, 0, 0, 0, -100, 0]
            max_values: [10000, 10000, 10000, 10000, 10000, 10000, 16000, 255]

results:
    # Output location
    output: "$ROOT/TSR"
    # Output filename pattern
    output_prefix: "yatsm_r{row_off:04d}_{num_rows:04d}_c{col_off:04d}_{num_cols:04d}.h5"

pipeline:
    overwrite: False
    tasks:
        ndvi:
            task: norm_diff
            require:
                data: [nir, red]
            output:
                data: [ndvi]
        ndmi:
            task: norm_diff
            require:
                data: [nir, swir1]
            output:
                data: [ndmi]
        X_optical:
            task: dmatrix
            require:
                data: [ndmi, ndvi]
            output:
                data: [X_optical]
            config:
                design: '1 + ordinal + harm(ordinal, 1)'
        CCDCesque:
            task: pixel_CCDCesque
            require:
                data: [red, nir, swir1]
            output:
                record: [ccdc]
            config:
                init:
                    consecutive: 7
